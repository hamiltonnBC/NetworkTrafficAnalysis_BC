-- Slide 1:
Introduce ourselves and our project

-- Slide 2:

Brief overview of the project:

Over the past few weeks we have worked to collect interesting network traffic 
and analyze it, both through visualizations and in intelligence gathering.
The first component, focused on visualization, visualizes a packet capture of over
one million packets generated by a cluster of virtual machines, using a 
combination of CMU's GHOSTS software and manual interaction with the network.

The second component is a script that will take any packet capture with 
broadcast packets and attempt to discover information about the network, such as 
generating an ARP table, or listing NetBIOS identities.

Objectives and goals:

- Gather network traffic ethically
- Gather network information via broadcast packet analysis
- Visualize network traffic
- Show that anyone can do packet capture analysis inside their computer

-- Slide 3:

Why this project is important:

It is vital that people understand how easy it is to evestrop on your 
communications - and even if you aren't evestropping, how easy it is to gather 
information about the network just by virtue of being on the network. Just 
because most of the internet uses HTTPS doesn't mean that there isn't going to 
be some misconfiguration that results in an SVG file being loaded in without 
HTTPS*.

It isn't just the government and big corperations that can spy on you - a 
college student could feasably do it.

*I believe if a browser is configured correctly, this is prohibited if the page 
itself is loaded under HTTPS.

Relevant background information and context:

It is illegal to capture other people's packets over the air. This depends 
widely from jurisdiction to jurisdiction. It is doubly prohibited to do so in an
organization's environment, where the organization is very particular about 
having a monopoly over intercepting its users' packets.

Of course, this never stopped the government. I think most of us are familiar 
with the Snowden leaks.


-- Slide 4:

Specific problems being addressed:
- What kinds of packets are visible on a network?
- What can you find out about a network without even capturing other people's 
packets?

Scope and limitations:
- Does not decrypt packets (lol)
- Does not attempt to perform any kind of complex deep packet inspection
- No processing of live user data (though I did experiment on myself)
- GHOSTS emulation of user activity is quite primitive - it boils down to having 
a "timeline" of probable user events that are executed with some degree of 
regularity, and most network activity involves visiting a set of websites and 
clicking random buttons on the page.


-- Slide 5:

Approach and techniques used:

The first thing we needed to do was gather packets. We could have used a packet 
capture from online, but we thought it would be better to create our own. 
However, we needed to do so legally, while also keeping it interesting.

Virtual machines were the answer. We configured libvirt (with qemu, virt-manager 
and virsh) on a GNU/Linux machine. Using CMU's GHOSTS program we created two 
"NPC" Windows and Debian GNU/Linux machines, along with a third Debian machine 
to be manually controlled with FileZilla installed, and a FTP server running 
vsFTP. Had another machine running a youtube video. SSH was used extensively to 
manage these virtual machines and perform file transfer (qcow2 requires a weird 
setup to be mounted).

With GHOSTS puppetting its machines and me performing some large unencrypted 
file transfers between the FTP server and third client machine, a large number 
of packets were generated. We connected to the virtual network adapter with 
wireshark, and listened. In about fourty minutes we had 1.1 million packets, 1.1 
GB in size.

Tools and technologies used:

- scapy
- CMU GHOSTS
- Virtual machines
    - QEMU
    - Virt-manager
    - #virsh
    - GNU/Linux
    - Debian
    - vsftp
    - ssh

-- Slide 6:

Architecture and design:

<insert diagram.png>

The broadcast analyzer itself is a simple script that takes a packet capture and 
uses scapy to analyze it. Scapy breaks down the packet into its hirearchy

Key algorithims and protocols:

Address Resolution Protocol (ARP), NetBIOS Name Service, Transmission Control 
Protocol (TCP), ...

Implementation details:

The packet analyzer is relatively simple. It simply looks through the packet 
capture, checks for known layers (ARP, NBNS), and extracts the data 
involved. For ARP, it pulls the MAC address and IP of the sender, and then finds 
the corresponding ARP response and puts together which IP goes to which IP. For 
NBNS, it just records the name.

Additionally, a list of OUIs is used to determine the vendor of a particular 
network card (or, at least, the one assumed by the given MAC address).

-- Slide 7:

Key findings and outcomes:

Data analysis and interpretation:

Performance metrics:

-- Slide 8:

Major challenges faced during this project:

- How to generate realistic user traffic
- How to create a virtual network adapter and capture traffic from there

How these challenges were resolved:

- Spending more time researching the web
- It turned out that once I had the virtual machines configured, a virtual 
network adapter was already configured. The problem was that my firewall was 
interferring with it. I think it's because it used iptables where libvirt uses 
nftables. I changed my firewall software to something more configurable, and now 
everything works!

-- Slide 9:

Summary of the project:

We simulated network traffic in a virtual environment, and performed analysis 
and visualization of those packets.

Key takeaways and contributions:

Your internet traffic is not anonymous. Our methodology was primitive compared 
to what a deep packet inspector or a determined network foresnics fanatic can 
accomplish. Use a VPN while on college campus if you value your privacy, and 
turn on network obfuscation if you want that extra security.

- Orion: Virtual machines, packet captures, broadcast analysis
- Hamilton: Python analysis script, Interactive Dashboard, ML Anomaly detection

-- Slide 10:

Protential improvements and next steps:

Adding more GHOST machines to the VM network, watching and collecting 
unencrypted communications (not as trivial, because sometimes applications will 
roll their own encryption instead of using TLS)

Long-term vision for the project:

- Looking at metadata in packet headers to determine what the user is doing; eg, 
are they browsing the web? Submitting a form? Watching a video?
- Feeding packet capture information into an AI, then seeing if it can detect 
any network anomolies that we introduce.

-- Slide 11:

Open the floor for questions from the audience

-- Slide 12:

References:

- MAC OUIs https://www.ietf.org/rfc/rfc1002.txt
- scapy documentation https://scapy.readthedocs.io/en/latest/usage.html
- Purely used for direction early on:
    - https://medium.com/@info_82002/python-for-network-traffic-analysis-2386b8d6144e
    - 
https://vnetman.github.io/pcap/python/pyshark/scapy/libpcap/2018/10/25/analyzing-packet-captures-with-python-part-1.html
- https://en.wikipedia.org/wiki/Transport_Layer_Security
- https://en.wikipedia.org/wiki/HTTP#HTTP_data_exchange
- 





